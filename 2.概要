//隐式全局变量
function sum(x,y){
	result = x + y; //全局变量，最好做法是 var result = x + y;把它变为局部变量
	return result;
}

//反模式：在var声明中使用链式的方法
function foo(){
	var a=b=0; //从右往左计算：b=0(ps:未声明，所以是全局变量)，var a = 0(ps:局部变量);
	//...
}

function foo(){
	var a,b;
	a = b = 0; //两个都是本地变量
	//...
}

//忘记var时的副作用
  //隐身创建的全局变量跟显式定义的全局变量的区别：通过delete删除表现的不一致
    //通过var定义的全局变量（在函数体外的变量），不能被删除
    //没用用var定义的全局变量（不考虑函数内的变量），能被删除

//隐式全局变量不是真正的变量，而是全局对象的属性（ps:属性可以删除，而变量不行）

var global_var = 1;      //定义三个全局变量
    global_novar = 2;

    (function(){
    	global_funvar = 3;
    }())

delete global_var; //false    //删除三个全局变量
delete global_novar; //true
delete global_funvar; //true

typeof(global_var); //number
typeof(global_novar); //undefined
typeof(global_funvar); //undefined

//单var模式：在函数顶部使用唯一一个var是非常推荐的一种模式
function func(){
	var a = 1,
		b = 2,
		sum = a + b,
		myobject = {},
		i,
		j;
		//函数体...
}
  	//DOM的赋值操作也可放到变量中
  	function updateElement(){
  		var el = document.getElementById("result"),
  	    	style = el.style;
  	    	//使用el和style
  	}

//声明提前：分散的var带来的问题
myname = 'global';  //全局变量
function func(){
	alert(myname); //"undefined"    //已经被声明：所有变量的声明都被提前到函数顶部
	var myname = 'local';
	alert(myname); //"local"
}
func();

 //等价于
 myname = 'global';
 function func(){
 	var myname; // => var myname=undefined
 	alert(myname); //undefined
 	myname = 'local';
 	alert(myname); //local
 }
 func();

//for循环：对数组或是类似数组的对象进行遍历
    //不好的遍历方法:每次遍历都要访问数组的长度，耗性能
    for(var i = 0; i < myarray.length; i++){
    	//访问myarray[i]...
    }

   //最好的遍历方法：写for循环中缓存要遍历数组的长度
   for(var i = 0, max = myarray.length; i < max; i++){ //length只获取一次，然后整个循环过程使用它
   		//访问myarray[i]...
   }

   //单var模式
   function looper(){
   		var i = 0,
   		    max,
   		    myarray = [];

   		for(i = 0, max = myarray.length; i < max; i++){
   			//访问myarray[i]...
   		}
   }

   //PS: i++ 降低了可读性，可改成 i += 1; or i = i + 1;

//for-in循环：对非数组对象进行遍历。（PS：通过for - in进行遍历被称为“枚举”）
  	//对象
  	var man = {
  	 	hands:2,
  	 	legs:2,
  	  	heads:1
  	};
  	//在代码的另一个地方给所有对象添加一个方法
  	if(typeof Object.prototype.clone === 'undefined'){  
  		Object.prototype.clone = function(){}
  	}

  	//原型链是实时的，要想在枚举的时候，不把clone遍历出来，那就要用到hasOwnProperty()来过滤来自原型的属性
  	for(var i in man){
  		if(man.hasOwnProperty(i)){ //过滤clone()
  			console.log(i,':',man[i]);
  		}

  		//避免has命名冲突
  	}
  	/*
	控制台中的结果
	hands : 2
	legs : 2
	heads : 1
	*/

	//如果不用过滤hasOwnProperty()
	for(var i in man){
		console.log(i,':',man[i]);
	}
	/*
	控制台中的结果
	hands : 2
	legs : 2
	heads : 1
	clone:function()
	*/
    
    //通过Object.prototype调用，避免命名冲突;避免查找属性时从Object对象一路找到原型的冗长过长，可以定义一个变量来缓存住它
    var i,
        hasOwn = Object.prototype.hasOwnProperty;
        for(i in man){
        	if(hasOwn.call(man,i)){
        		console.log(i,':',man);
        	}
        }

//（不）扩充内置原型
   if(typeof Object.prototype.Mymethod !== 'function'){
   		Object.prototype.Mymethod = function(){
   			//实现...
   		};
   }

//Switch模式
    var inspect_me = 0,
        result = '';
    switch (inspect_me){
    case 0:
    	result = 'zero';
    	break;
    case 1:
    	result = 'one';
    	break;
    default:
    	result = 'unknown';
    }

//避免隐式类型转换
	var zero = 0;
	if(zero === false){
		//不会执行，因为zero是0，不是false
	}

	if(zero == false){
		//代码块会执行
	}

//给setInterval()、setTimeout()和Function()构造函数传入字符串
	setTimeout('myFunc()',1000);
	setTimeout('myFunc(1,2,3)',1000);

	//更好的做法
	setTimeout(myFunc，1000);
	setTimeout(function(){
		myFunc(1,2,3);
	},1000);

//使用parselInt()进行数字转换
	var month = "06",
	    year = "09";
	month = parseInt(month, 10);
	year = parseInt(year, 10);

//命名规范
	//js中没有类，但有构造函数，通过new来调用构造函数
	var adam = new Person();

	//首字母小写的是普通函数； 首字母大写是构造函数
	function MyConstructor(){...} //构造函数
	function myFunction(){...}  //普通函数
